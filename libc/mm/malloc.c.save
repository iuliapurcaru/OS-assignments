// SPDX-License-Identifier: BSD-3-Clause

#include <internal/mm/mem_list.h>
#include <internal/types.h>
#include <internal/essentials.h>
#include <sys/mman.h>
#include <string.h>
#include <stdlib.h>
#include <errno.h>

void *malloc(size_t size)
{
	/* TODO: Implement malloc(). */
	void *result = mmap(NULL, size, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, -1, 0);
	if(result == MAP_FAILED) {
		return NULL;
	}
	return result;
}

void *calloc(size_t nmemb, size_t size)
{
	/* TODO: Implement calloc(). */
        void *result = malloc(size);

        if(result == MAP_FAILED) {
                return NULL;
        }
        memset(result, 0, nmemb * size);
        return result;
}

void free(void *ptr)
{

	/* TODO: Implement free(). */
	if(ptr == NULL) {
		return;
	}
//	struct mem_list *mem = mem_list_extract(ptr);
/*	if(mem == NULL) {
		return;
	}
	mem_list_free(mem);
*/	munmap(ptr, 0);
/*
    struct mem_list *mem = mem_list_find(ptr);
    if (mem == NULL) {
        return;
    }

    mem_list_del(ptr);
    munmap(mem->start, mem->len);
    mem_list_free(mem);*/
}

void *realloc(void *ptr, size_t size)
{
	/* TODO: Implement realloc(). */
	void *result;

	if (size == 0) {
		free(ptr);
		return NULL;
	}
	if (ptr == NULL) {
		return malloc(size);
	}

	result = malloc(size);
	if (result == MAP_FAILED) {
		return NULL;
	}
	free(ptr);
	return result;
}

void *reallocarray(void *ptr, size_t nmemb, size_t size)
{
	/* TODO: Implement reallocarray(). */

	size_t total_size = nmemb * size;
	//void *result;
	if (ptr == NULL) {
		//result = mmap(NULL, total_size, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, -1, 0);
		//if (result == MAP_FAILED) {
		return NULL;
		//}
	//return result;
	}
	if (total_size == 0) {
		free(ptr);
		return NULL;
	}

	void *result = mremap(ptr, 0, total_size, MREMAP_MAYMOVE);
	if (result == MAP_FAILED) {
		return NULL;
	}
	return result;
}
